{
	"name": "Notebook 1",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "demosparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 1,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "3",
				"spark.autotune.trackingId": "cd3098d6-794f-405a-911e-c75a1b451e6b"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/9f32c4e7-8714-4d8a-b119-01559ea2a3a6/resourceGroups/demoresourcegroup/providers/Microsoft.Synapse/workspaces/demoserverlesssynapse/bigDataPools/demosparkpool",
				"name": "demosparkpool",
				"type": "Spark",
				"endpoint": "https://demoserverlesssynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/demosparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.5",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"df = spark.sql(\"select * from Database1.rankedmetrics\")\n",
					"df.show()"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"source": [
					"df.columns"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.window import Window\n",
					"from pyspark.sql.functions import col, desc, row_number"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": true
					}
				},
				"source": [
					"window_spec = Window.partitionBy(\"database\").orderBy(desc(\"cpu_usage\"))\n",
					"df_with_rank = df.withColumn(\"rank\", row_number().over(window_spec))\n",
					"second_highest = df_with_rank.filter(col(\"rank\") == 2).drop(\"rank\")\n",
					"\n",
					"df_with_rank.show(c)"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"source": [
					"df_with_rank.select(\"database\", \"cpu_usage\", \"rank\").orderBy(desc(\"database\")).show()"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}